(function (d3) {
  'use strict';

  const colorLegend = (selection, props) => {
    const {
      colorScale,
      circleRadius,
      spacing,
      textOffset,
      onClick,
      selectedStateValue
    } = props;

    const groups = selection.selectAll('g')
      .data(colorScale.domain());
    const groupsEnter = groups
      .enter().append('g')
        .attr('class', 'tick');
    groupsEnter
      .merge(groups)
        .attr('transform', (d, i) =>
          `translate(0, ${i * spacing})`
        )
    		.attr('opacity', d => 
          (!selectedStateValue || d === selectedStateValue)
            ? 1
            : 0.2
        )
    		.on('click', d => onClick(
      		d === selectedStateValue
    				? null
    				: d
    		));
      
    groups.exit().remove();

    groupsEnter.append('circle')
      .merge(groups.select('circle'))
        .attr('r', circleRadius)
        .attr('fill', colorScale);

    groupsEnter.append('text')
      .merge(groups.select('text'))
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render = data => {
    const title = 'Reviews per state and day of a year';
    
    const xValue = d => d.day;
    const xAxisLabel = 'Days';
    
    const yValue = d => d.review;
    const yAxisLabel = 'No. of Reviews';
    
    const colorValue = d => d.state;
    
    const margin = { top: 60, right: 180, bottom: 100, left: 150 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const colorScale = d3.scaleOrdinal(d3.schemeCategory10);
    
    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.append('g').call(yAxis);
    yAxisG.selectAll('.domain').remove();
    
    yAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', -95)
        .attr('x', -innerHeight / 2)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
        .text(yAxisLabel);
    
    const xAxisG = g.append('g').call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`);
    
    xAxisG.select('.domain').remove();
    
    xAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', 70)
        .attr('x', innerWidth / 2)
        .attr('fill', 'black')
        .text(xAxisLabel);
    
    let selectedStateValue;
    
    const onClick = d => {
      selectedStateValue = d;
    };
    
    const lineGenerator = d3.line()
    	.x(d => xScale(xValue(d)))
    	.y(d => yScale(yValue(d)))
    	.curve(d3.curveBasis);
    
    const lastYValue = d => 
    	yValue(d.values[d.values.length -1]);
    
    const nested = d3.nest()
    	.key(colorValue)
    	.entries(data)
    	.sort((a,b) => 
            d3.descending(lastYValue(a), lastYValue(b)));
    
    colorScale.domain(nested.map(d => d.key));
    
    g.selectAll('.line-path').data(nested)
    	.enter().append('path')
    		.attr('class', 'line-path')
    		.attr('d', d => lineGenerator(d.values))
    		.attr('stroke', d => colorScale(d.key))
    	.append('title')
    		.text(d => 'No. of reviews of ' + d.key + ': ' + d.values[0].review);

    g.append('text')
        .attr('class', 'title')
        .attr('y', -10)
        .text(title);

    svg.append('g')
        .attr('transform', `translate(800,120)`)
        .call(colorLegend, {
          colorScale,
          circleRadius: 10,
          spacing: 25,
          textOffset: 14,
      		onClick,
      		selectedStateValue
        });
  };
    
  	/*svg.call(zoom().on('zoom', () => {
      g.attr('transform', event.transform);
   	}));*/
  	
     

  d3.csv('https://vizhub.com/Resl411/datasets/new-states.csv')
    .then(data => {
      data.forEach(d => {
        d.review = +d.review;
        d.day = +d.day;       
      });
      render(data);
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,